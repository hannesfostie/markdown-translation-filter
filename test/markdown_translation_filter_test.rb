# frozen_string_literal: true
require 'test_helper'

class MarkdownTranslationFilterTest < Minitest::Test
  def pipeline
    HTML::Pipeline.new [
      MarkdownTranslationFilter
    ], { markdown_parser: HeaderRenderer }
  end

  def test_it_works
    assert_equal "hello", pipeline.call("hello")[:output].chomp
  end

  def test_it_renders_header_as_html
    # current solution does not properly render children of a node, in this
    # case, <em>
    md = "## Foo bar *baz*"
    assert_equal '<h2 id="foo">Foo bar <em>baz</em></h2>', pipeline.call(md)[:output].chomp
  end

  def test_it_doesnt_add_weird_linebreaks
    # current solution adds a weird linebreak in the middle of the alt text
    md = '![Diagram illustrating logplex sources and drains](https://devcenter1.assets.heroku.com/article-images/1521584374-logplex-sources-and-drains.png)'
    assert_equal md, pipeline.call(md)[:output].chomp
  end

  def test_it_doesnt_rewrite_commonmark_style
    # current solution replaces an unordered list with asterisks with one using spaces and
    # dashes
    # other examples include rewriting ``` codeblocks to indented codeblocks
    md = "This is a list:\n\n* foo\n* bar"
    assert_equal md, pipeline.call(md)[:output].chomp
  end

  def test_it_doesnt_rewrite_callouts
    # current solution removes newlines where it thinks one isn't needed
    md = ">callout\n>The Heroku CLI requires **Git**, the popular version control system."
    assert_equal md, pipeline.call(md)[:output].chomp
  end

  def test_ideal_scenario
    # in an ideal world, the only change to the input text would be the
    # replacing of the headings keeping the original markdown intact
    md = article_markdown('## Local Workstation Setup', '## Write your App')
    expected = article_markdown("<h2 id=\"foo\">Local Workstation Setup</h2>", "<h2 id=\"foo\">Write your App</h2>")

    assert_equal expected, pipeline.call(md)[:output].chomp
  end

  def article_markdown(*replacements)
    (
<<~MARKDOWN
<!-- STOP
  This file was generated by a rundoc script, do not modify it.
  Instead modify the rundoc script and re-run it.
  Command: bin/rundoc build --path=test/fixtures/rails_4/rundoc.md
STOP -->

<!--
  rundoc src:
  https://github.com/schneems/rundoc/blob/master/test/fixtures/rails_4/rundoc.md
-->

> warning
> The latest version of Rails available is [Rails 5](https://devcenter.heroku.com/articles/getting-started-with-rails5). If you are starting a new application we recommend you use the most recently released version.
Ruby on Rails is a popular web framework written in [Ruby](http://www.ruby-lang.org/). This guide covers using Rails 4 on Heroku. For information about running previous versions of Rails on Heroku, see [Getting Started with Rails 3.x on Heroku](getting-started-with-rails3).

> callout If you are already familiar with Heroku and Rails, reference the [simplifed Rails 4 on Heroku guide](https://devcenter.heroku.com/articles/rails4) instead. For general information on how to develop and architect apps for use on Heroku, see [Architecting Applications for Heroku](https://devcenter.heroku.com/articles/architecting-apps).
For this guide you will need:

- Basic Ruby/Rails knowledge
- Locally installed version of Ruby 2.0.0+, Rubygems, Bundler, and Rails 4+
- Basic Git knowledge
- A Heroku user account: [Signup is free and instant](https://signup.heroku.com/devcenter)

%s

Install the [Heroku Toolbelt](https://toolbelt.heroku.com/) on your local workstation. This ensures that you have access to the [Heroku command-line client](/categories/command-line), Foreman, and the Git revision control system. You will also need [Ruby and Rails installed](http://guides.railsgirls.com/install).

Once installed, you'll have access to the `$ heroku` command from your command shell. Log in using the email address and password you used when creating your Heroku account:


> callout Note that `$` symbol before commands indicates they should be run on the command line, prompt, or terminal with appropriate permissions. Do not copy the `$` symbol.
```term
$ heroku login
Enter your Heroku credentials.
Email: schneems@example.com
Password:
Could not find an existing public key.
Would you like to generate one? [Yn]
Generating new SSH public key.
Uploading ssh public key /Users/adam/.ssh/id_rsa.pub
```

Press enter at the prompt to upload your existing `ssh` key or create a new one, used for pushing code later on.

%s

> callout To run on Heroku your app must be configured to use the Postgres database, have all dependencies declared in your `Gemfile`, and have the `rails_12factor` gem in the production group of your `Gemfile`

You may be starting from an existing app, if so [upgrade to Rails 4](http://edgeguides.rubyonrails.org/upgrading_ruby_on_rails.html#upgrading-from-rails-3-2-to-rails-4-0) before continuing. If not, a vanilla Rails 4 app will serve as a suitable sample app. To build a new app make sure that you're using the Rails 4.x using `$ rails -v`. You can get the new version of rails by running,

```term
$ gem install rails -v 4.2.9 --no-document
Successfully installed rails-4.2.9
1 gem installed
```

Note: There may be a [more recent version of Rails](https://rubygems.org/gems/rails/versions) available, we recommend always running the latest. You may want to [run Rails 5 on Heroku](https://devcenter.heroku.com/articles/getting-started-with-rails5).

Then create a new app:

<!--
 You may run into this bug when tring to use a
 specific version of rails:
 https://github.com/rubygems/rubygems/issues/1932#issuecomment-304133990
-->


Then move into your application directory.

```term
$ cd myapp
```

> callout If you experience problems or get stuck with this tutorial, your questions may be answered in a later part of this document. Once you experience a problem try reading through the entire document and then going back to your issue. It can also be useful to review your previous steps to ensure they all executed correctly.
If already have an app that was created without specifying `--database=postgresql` you will need to add the `pg` gem to your Rails project. Edit your `Gemfile` and change this line:

```ruby
gem 'sqlite3'
```

To this:

```ruby
gem 'pg'
```

> callout We highly recommend using PostgreSQL during development. Maintaining [parity between your development](http://www.12factor.net/dev-prod-parity) and deployment environments prevents subtle bugs from being introduced because of differences between your environments. [Install Postgres locally](https://devcenter.heroku.com/articles/heroku-postgresql#local-setup) now if it is not allready on your system.
Now re-install your dependencies (to generate a new `Gemfile.lock`):

```ruby
$ bundle install
```

You can get more information on why this change is needed and how to configure your app to run postgres locally see [why you cannot use Sqlite3 on Heroku](https://devcenter.heroku.com/articles/sqlite3).

In addition to using the `pg` gem, you'll also need to ensure the `config/database.yml` is using the `postgresql` adapter.

The development section of your `config/database.yml` file should look something like this:

```term
$ cat config/database.yml
# PostgreSQL. Versions 8.2 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On OS X with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On OS X with MacPorts:
#   gem install pg -- --with-pg-config=/opt/local/lib/postgresql84/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem 'pg'
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see rails configuration guide
  # http://guides.rubyonrails.org/configuring.html#database-pooling
  pool: 5
```
MARKDOWN
) % replacements
  end
end
